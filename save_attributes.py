# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SaveAttributes
                                 A QGIS plugin
 This plugin saves the attributes of the selected vector layer as a CSV file.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Fredson
        email                : fredson@sumi
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import codecs

from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog
from qgis.PyQt.QtWidgets import QAction
from qgis.core import *

# Initialize Qt resources from file resources.py

from PIL import Image, ImageDraw
import PIL
from math import ceil
import numpy as np


def get_starting_values(bounding):
    # mantém 2 casas de precisão
    w = ceil(bounding.width() * 100)
    h = ceil(bounding.height() * 100)
    im = Image.new("RGBA", (w, h),
                   (255, 255, 255))
    min_x = bounding.xMinimum() * 100
    min_y = bounding.yMinimum() * 100
    return im, min_x, min_y


def convert_coordinates(min_x, min_y, n):
    n = np.round(n, 2)
    n *= 100
    n = np.ceil(n)
    n = n.tolist()
    n = [(x - min_x, y - min_y) for x, y in n]
    n = [tuple(row) for row in n]
    return n


def image_from_point(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)
    n = convert_coordinates(min_x, min_y, np.array(x))
    draw.point(n, fill="00FF00")
    return im


def image_from_multi_point(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)
    for point in x:
        n = convert_coordinates(min_x, min_y, np.array(point))
        draw.point(n, fill="00FF00")
    return im


def image_from_line(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)
    n = np.array(x)
    n = convert_coordinates(min_x, min_y, n)
    draw.line(n, fill="#00FF00", width=25, joint=3)
    return im


def image_from_multi_line(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)
    for line in x:
        n = np.array(line)
        n = convert_coordinates(min_x, min_y, n)
        draw.line(n, fill="#00FF00", width=25, joint=3)
    return im


def image_from_polygon(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)
    for figure in x:
            n = np.array(figure)
            n = convert_coordinates(min_x, min_y, n)
            draw.polygon(n, fill=None, outline="blue")
    return im


def image_from_multipolygon(x, bounding):
    im, min_x, min_y = get_starting_values(bounding)

    draw = ImageDraw.Draw(im)

    for polygon in x:
        for figure in polygon:
            n = np.array(figure)
            n = convert_coordinates(min_x, min_y, n)
            draw.polygon(n, fill=None, outline="blue")
    return im


def feature_to_png(feature) -> Image:
    geom = feature.geometry()
    bounding = geom.boundingBox()
    geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())

    image = None
    if geom.type() == QgsWkbTypes.PointGeometry:
        # the geometry type can be of single or multi type
        if geomSingleType:
            x = geom.asPoint()
            image = image_from_point(x, bounding)
        else:
            x = geom.asMultiPoint()
            image = image_from_multi_point(x, bounding)
    elif geom.type() == QgsWkbTypes.LineGeometry:
        if geomSingleType:
            x = geom.asPolyline()
            image = image_from_line(x, bounding)
        else:
            x = geom.asMultiPolyline()
            image = image_from_multi_line(x, bounding)
    elif geom.type() == QgsWkbTypes.PolygonGeometry:
        if geomSingleType:
            x = geom.asPolygon()
            image = image_from_polygon(x, bounding)
        else:
            x = geom.asMultiPolygon()
            image = image_from_multipolygon(x, bounding)
    else:
        print("Unknown or invalid geometry")

    if image is None:
        return image

    image = image.rotate(180)
    image = image.transpose(PIL.Image.FLIP_LEFT_RIGHT)
    return image

from .resources import *
# Import the code for the dialog
from .save_attributes_dialog import SaveAttributesDialog
import os.path


class SaveAttributes:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SaveAttributes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SaveAttributes')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SaveAttributes', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/save_attributes/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Save Attributes as CSV'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&SaveAttributes'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ", "", "*.csv"
        )
        self.dlg.lineEdit.setText(filename)

    def select_output_image_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ", "", "*.png"
        )
        self.dlg.imageLineEdit.setText(filename)

    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = SaveAttributesDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)
            self.dlg.imagePushButton.clicked.connect(self.select_output_image_file)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        layers = [layer for layer in layers if hasattr(layer.layer(), 'fields')]

        # Clear the contents of the comboBox from previous runs
        self.dlg.layerComboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.layerComboBox.addItems([layer.name() for layer in layers if hasattr(layer.layer(), 'fields')])

        selected_layer_index = self.dlg.layerComboBox.currentIndex()
        selected_layer = layers[selected_layer_index].layer()

        self.dlg.imageComboBox.addItems(
            [str(f['name']) for f in selected_layer.getFeatures()]
        )



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            filename = self.dlg.lineEdit.text()
            save_stats = self.dlg.checkBox.isChecked()
            d = QgsDistanceArea()
            d.setEllipsoid('WGS84')

            with codecs.open(filename, 'w', "utf-8") as output_file:
                fieldnames = [field.name() for field in selected_layer.fields()]

                # write header
                line = ','.join(name for name in fieldnames)
                if save_stats:
                    line += ", area (km^2), perimeter (km)"
                line += '\n'

                output_file.write(line)
                # wirte feature attributes
                for f in selected_layer.getFeatures():
                    line = ','.join(str(f[name]) for name in fieldnames)
                    if save_stats:
                        geom = f.geometry()
                        area = d.convertAreaMeasurement(d.measureArea(geom), QgsUnitTypes.
                                                        AreaSquareKilometers)
                        perimeter = d.convertLengthMeasurement(d.measureArea(geom), QgsUnitTypes.
                                                               DistanceKilometers)
                        line += f", {area}, {perimeter}"
                    line += '\n'
                    output_file.write(line)

            if self.dlg.imageCheckBox.isChecked():
                features = [feature for feature in selected_layer.getFeatures()]
                feature_index = self.dlg.imageComboBox.currentIndex()
                feature = features[feature_index]
                s = f"index = {feature_index}, image file= {self.dlg.imageLineEdit.text()}"
                QgsMessageLog.logMessage(s, "Huge")
                image = feature_to_png(feature)

                image.save(self.dlg.imageLineEdit.text(), "PNG")

            self.iface.messageBar().pushMessage(
                "Success", "Output file written at " + filename,
                level=Qgis.Success, duration=3)
